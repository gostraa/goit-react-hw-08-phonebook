{"version":3,"file":"static/js/264.7d8a87b2.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Contacts/ContactsList.module.css?7ecc","components/Contacts/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contacts_list_title\":\"ContactsList_contacts_list_title__B5I2R\",\"contacts_list\":\"ContactsList_contacts_list__OgxOw\",\"contacts_list_item_wrapper\":\"ContactsList_contacts_list_item_wrapper__hlVE6\",\"contacts_list_item\":\"ContactsList_contacts_list_item__ze4ls\",\"contacts_list_delete_btn\":\"ContactsList_contacts_list_delete_btn__BJL8K\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { getStateContacts, getStateFilter } from 'redux/selectors';\nimport {\n  deleteContactThunk,\n  getContactsThunk,\n} from 'redux/contactsThunk/contactsThunk';\nimport { useEffect } from 'react';\nimport styles from './ContactsList.module.css';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(getStateContacts);\n  const filter = useSelector(getStateFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    if (!contacts) return [];\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <>\n      <h2 className={styles.contacts_list_title}>My contacts</h2>\n      <ul className={styles.contacts_list}>\n        {filteredContacts.map(contact => (\n          <li className={styles.contacts_list_item} key={contact.id}>\n            <div className={styles.contacts_list_item_wrapper}>\n              <p>{contact.name}:</p>\n              <p> {contact.number}</p>\n            </div>\n            <button\n              type=\"button\"\n              className={styles.contacts_list_delete_btn}\n              onClick={() => dispatch(deleteContactThunk(contact.id))}\n            >\n              DELETE\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_form_filter_title\":\"Filter_contacts_form_filter_title__k6XcF\",\"contacts_form_filter_input\":\"Filter_contacts_form_filter_input__PxvGU\"};","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice/FilterSlice';\nimport styles from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.contacts_form_filter_wrapper}>\n      <p className={styles.contacts_form_filter_title}>Filter my contacts 😄</p>\n      <input\n        name=\"filter\"\n        className={styles.contacts_form_filter_input}\n        onChange={e => dispatch(filterContacts(e.target.value))}\n      />\n    </div>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"section_contacts_form\":\"Form_section_contacts_form__40+-1\",\"contacts_form_title\":\"Form_contacts_form_title__0pPEn\",\"contacts_form_label\":\"Form_contacts_form_label__5uNwn\",\"contacts_form_input\":\"Form_contacts_form_input__FUDeb\",\"contacts_form_button\":\"Form_contacts_form_button__Qc1ZX\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getStateContacts } from 'redux/selectors';\nimport { addContactThunk } from 'redux/contactsThunk/contactsThunk';\nimport styles from './Form.module.css';\n\nexport const Form = () => {\n  const [contactInfo, setContactInfo] = useState({ name: '', number: '' });\n  const contacts = useSelector(getStateContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setContactInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isExist = contacts.find(\n      el =>\n        el.name.toLowerCase() === contactInfo.name.toLowerCase() ||\n        el.number === contactInfo.number\n    );\n\n    if (isExist) {\n      alert('This contact already exists 😮');\n      return contacts;\n    }\n\n    dispatch(addContactThunk({ ...contactInfo, id: nanoid() }));\n    setContactInfo({ name: '', number: '' });\n  };\n\n  return (\n    <form className={styles.contacts_form} onSubmit={handleSubmit}>\n      <h2 className={styles.contacts_form_title}>Phonebook</h2>\n\n      <label\n        className={styles.contacts_form_label}\n        htmlFor=\"specificSizeInputName\"\n      >\n        Name\n      </label>\n\n      <input\n        className={styles.contacts_form_input}\n        id=\"inputName\"\n        type=\"text\"\n        name=\"name\"\n        value={contactInfo.name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={handleChange}\n        required\n      />\n      <label\n        className={styles.contacts_form_label}\n        htmlFor=\"specificSizeInputName\"\n      >\n        Number\n      </label>\n\n      <input\n        className={styles.contacts_form_input}\n        id=\"inputNumber\"\n        type=\"tel\"\n        name=\"number\"\n        value={contactInfo.number}\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"col-auto\">\n        <button type=\"submit\" className={styles.contacts_form_button}>\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n","import { ContactsList } from 'components/Contacts/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport styles from '../../components/Form/Form.module.css';\n\nconst Contacts = () => {\n  return (\n    <section className={styles.section_contacts_form}>\n      <Form />\n      <Filter />\n      <ContactsList />\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactsList","contacts","useSelector","getStateContacts","filter","getStateFilter","dispatch","useDispatch","useEffect","getContactsThunk","filteredContacts","normalizedFilter","toLowerCase","_ref","name","includes","getFilteredContacts","_jsxs","_Fragment","children","_jsx","className","styles","map","contact","number","type","onClick","deleteContactThunk","id","Filter","onChange","e","filterContacts","target","value","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Form","_useState","useState","_useState2","_slicedToArray","contactInfo","setContactInfo","handleChange","_e$target","prevInfo","_objectSpread","_defineProperty","onSubmit","preventDefault","find","el","alert","addContactThunk","htmlFor","pattern","title","required"],"sourceRoot":""}